// ConsoleApplication1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#pragma comment(lib, "winmm.lib")



#include <iostream>
#include <windows.h>
#include <mmsystem.h>
#include <fstream>
#include <string>
#include <sstream>
#include <thread>
#include <fftw3.h>

#define GLFW_INCLUDE_NONE
#include <glfw3.h>
#include <glew.h>








struct wav_header {

    /*
        Basandonos en la estructura  canonica del formato WAVE:
        http://soundfile.sapp.org/doc/WaveFormat/

    */
    char* ChunkID = (char*)calloc(4, 4);
    unsigned int ChunkSize;
    char* Format = (char*)calloc(4, 4);

    char* Subchunk1ID = (char*)calloc(4, 4);
    unsigned long int SubChunk1Size;
    unsigned short int AudioFormat;
    unsigned short int NumChannels;
    unsigned long SampleRate;
    unsigned long ByteRate;
    unsigned short int BlockAlign;
    unsigned short int BitsPerSample;
    
    char* Subchunk2ID = (char*)calloc(4, 4);
    unsigned long int Subchunk2Size;


public:
    void readWAV( std::string pathaudioFile  )  { 
  
        FILE* audioin; 
        fopen_s(&audioin, pathaudioFile.c_str(), "rb");
        
        fread(ChunkID, 4, 1, audioin);
        fread(&ChunkSize,4,1,audioin);
        fread(Format, 4, 1,audioin);
        fread(Subchunk1ID, 4, 1, audioin);
        fread(&SubChunk1Size, 4, 1, audioin);
        fread(&AudioFormat, 2, 1, audioin);
        fread(&NumChannels, 2, 1, audioin);
        fread(&SampleRate, 4, 1, audioin);
        fread(&ByteRate, 4, 1, audioin);
        fread(&BlockAlign, 2, 1, audioin);
        fread(&BitsPerSample, 2, 1, audioin);
        fread(Subchunk2ID, 4, 1, audioin);
        fread(&Subchunk2Size, 4, 1, audioin);

        //short int* data = (short int*) calloc(1, Subchunk2Size);
        //fread(data, Subchunk2Size, 1, audioin);


        int sample_size = BitsPerSample / 8; //Esto esta en Bytes.
        int sample_count = (Subchunk2Size) / BitsPerSample;
        std::cout << "Sample count: " << sample_count << '\n';

        short int* audio_dat = (short int*)calloc(sample_count, 2);
        for (size_t i = 0; i < sample_count; i++)
        {

            fread(&audio_dat[i], 2, 1, audioin);
            //std::cout << "Sample " << i << " Data: " << audio_dat[i] << '\n';


        }







        fclose(audioin);

        

    }

    void print_header() {

        std::cout << "ChunkID: " << ChunkID << std::endl;
        std::cout << "ChunkSize: " << ChunkSize << std::endl;
        std::cout << "Format: " << Format  << std::endl;
        std::cout << "Subchink1ID: " << Subchunk1ID << std::endl;
        std::cout << "SubChunk1Size: "<< SubChunk1Size << std::endl;
        std::cout << "AudioFormat: " << AudioFormat << std::endl;
        std::cout << "NumChannels: " << NumChannels << std::endl;
        std::cout << "SampleRate: " << SampleRate << std::endl;
        std::cout << "ByteRate: " << ByteRate << std::endl;
        std::cout << "BlockAllign: " << BlockAlign << std::endl;
        std::cout << "BitsPerSample: " << BitsPerSample << std::endl;
        std::cout << "Subchunk2ID: " << Subchunk2ID << std::endl;
        std::cout << "Subchunk2Size: " << Subchunk2Size << std::endl;

    }



};






void PlayMusic(LPCWSTR pathname) {

    std::cout << "Playing music! " << std::endl;

    PlaySound(pathname, NULL, SND_FILENAME);
}

void ProcessSound(std::string pathname) {
    
    wav_header header;
    
    header.readWAV(pathname);
    header.print_header();


 

}

void FFT() {
    fftw_complex* out;
    fftw_plan p;


}

int Draw() {
    GLFWwindow* window;

    /* Inicializamos la biblioteca */
    if (!glfwInit())
        return -1;

    /* Crear ventana y su contexto OpenGL*/
    window = glfwCreateWindow(640, 480, "MusicVis", NULL, NULL);

    if (!window) {
        glfwTerminate();
        return -1;
    }

    /* Hacemos el contexto de la ventana actual */
    glfwMakeContextCurrent(window);

    /* Entramos en un blucle hastar cerrar la ventana */
    while (!glfwWindowShouldClose(window)) {

        /* Renderizamos */
        glClear(GL_COLOR_BUFFER_BIT);


        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }


    glfwTerminate();
}





int main()
{
    std::cout << "Listen World!\n";

    


    LPCWSTR Pathname = L"riff.wav";


    std::thread Process(ProcessSound, "riff.wav");

    std::thread Playback(PlayMusic, Pathname);

    std::thread Render(Draw);

    Process.join();
    Playback.join();
    Render.join();


    return 0;

    
    
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
  